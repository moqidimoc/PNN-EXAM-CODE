# Pseudoinverse

# INPUTS:
    # x: data
    # y: target
    # a: initial weights
    # b: margin
    # augmentation: True if data is augmented
    # sample_normalisation: True if sample normalisation applied
    
def pseudoinverse(x, y, a, b, augmentation, sample_normalisation):
    n_instances = len(x)
    
    if augmentation:
        x = np.insert(x, 0, 1, axis=1)
    
    if sample_normalisation: # CAREFUL WITH THE DATA LABEL
        x[y==-1] = -x[y==-1]
    
    pseudo = np.linalg.pinv(x) # pseudo-inverse
    a = np.dot(pseudo, b) # weights
        
    return a
    
# Tutorial example (exercise 12)
x = np.array([[0, 2], [1, 2], [2, 1], [-3, 1], [-2, -1], [-3, -2]]) # data
y = np.array([1, 1, 1, -1, -1, -1]) # targets
a = np.array([1, 0, 0]) # initial weights
b = np.array([1]*6) # margin

# And here we estimate the new vector
a = pseudoinverse(x, y, a, b, True, True)
print(a) # It should be [0.2273 0.3864 0.1894]
